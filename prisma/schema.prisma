// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//tabela de categoria, a qual receberá um ou mais produtos
model Categoria {
  id        String    @id @default(uuid())
  nome      String    @unique
  createdAt DateTime  @default(now())
  produtos  Produto[]

  @@map("categorias")
}

//tabela de produto, que recebe lotes e suas declarações nos orçamentos
model Produto {
  id            String        @id @default(uuid())
  numeracao     String        @unique
  nome          String
  descricao     String?
  categoriaId   String?
  categoria     Categoria?    @relation(fields: [categoriaId], references: [id], onDelete: SetNull)
  unidadeMedida UnidadeMedida //tipo de valor enum
  valorAtacado  Decimal       @db.Decimal(10, 2)
  valorVarejo   Decimal       @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  lotes         Lote[] //recebe todos os lotes relacionados

  orcamentos OrcamentoProduto[]

  @@map("produtos")
}

//tabela de lotes que se relaciona a um produto
model Lote {
  id             String    @id @default(uuid())
  numeracao      String
  quantAdquirida Int
  quantAtual     Int
  dataAquisicao  DateTime
  valorGasto     Decimal   @db.Decimal(10, 2)
  validade       DateTime?
  produtoId      String
  produto        Produto   @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@map("lotes")
}

//esquema/tipo para valores aceitos em unidadeMedida  
enum UnidadeMedida {
  UNITARIA
  METRICA
}

//model de clientes, que recebe orçamentos
model Cliente {
  id         String      @id @default(uuid())
  nome       String
  endereco   String
  telefone   String
  cpf        String?     @unique
  orcamentos Orcamento[]

  @@map("clientes")
}

//model de orcamento querecebe cliente, além dos produtos com dados tratados para orçamento
model Orcamento {
  id               String             @id @default(uuid())
  numeracao        String             @unique
  createdAt        DateTime           @default(now())
  clienteId        String
  cliente          Cliente            @relation(fields: [clienteId], references: [id])
  produtos         OrcamentoProduto[]
  valorTotal       Decimal            @db.Decimal(10, 2)
  desconto         Decimal?           @db.Decimal(10, 2)
  valorComDesconto Decimal            @db.Decimal(10, 2)
  situacao         SituacaoOrcamento  @default(PENDENTE)
  Venda            Venda[]

  @@map("orcamentos")
}

//model contendo produtos com dados tratados para serem vinculados ao orçamento
model OrcamentoProduto {
  id            String           @id @default(uuid())
  orcamentoId   String
  orcamento     Orcamento        @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)
  produtoId     String
  produto       Produto          @relation(fields: [produtoId], references: [id])
  quantidade    Int
  modalidade    ModalidadeCompra
  valorUnitario Decimal          @db.Decimal(10, 2)
  valorTotal    Decimal          @db.Decimal(10, 2)
  Devolucoes DevolucaoProduto[]

  @@map("orcamento_produtos")
}

//esquema/tipo para valores aceitos em modalidade (OrcamentoProduto)
enum ModalidadeCompra {
  ATACADO
  VAREJO
}

//esquema/tipo para valores aceitos em situação (orçamento)
enum SituacaoOrcamento {
  CANCELADO
  PENDENTE
  APROVADO
}

// model de venda que se relaciona com um orçamento 
model Venda {
  id             String         @id @default(uuid())
  numeracao      String         @unique
  createdAt      DateTime       @default(now())
  orcamentoId    String         @unique
  orcamento      Orcamento      @relation(fields: [orcamentoId], references: [id])
  formaPagamento FormaPagamento
  parcelas       Parcela[]
  devolucoes     Devolucao[]

  @@map("vendas")
}

//parcelas que se relacionam com uma única venda
model Parcela {
  id             String    @id @default(uuid())
  vendaId        String
  venda          Venda     @relation(fields: [vendaId], references: [id], onDelete: Cascade)
  valorParcela   Decimal   @db.Decimal(10, 2)
  dataVencimento DateTime
  dataPagamento  DateTime?

  @@map("parcelas")
}

model Devolucao {
  id       String             @id @default(uuid())
  vendaId  String
  venda    Venda              @relation(fields: [vendaId], references: [id], onDelete: Cascade)
  produtos DevolucaoProduto[]

  @@map("devolucoes")
}

//devoluções que se relacionam com a model de produtos que estão em orçamentos
model DevolucaoProduto {
  id             String    @id @default(uuid())
  devolucaoId    String
  devolucao      Devolucao @relation(fields: [devolucaoId], references: [id], onDelete: Cascade)
  produtoId      String
  produto        OrcamentoProduto   @relation(fields: [produtoId], references: [id])
  quantidade     Int
  valorReembolso Decimal   @db.Decimal(10, 2)

  @@map("devolucao_produtos")
}

//enum para forma de pagamento
enum FormaPagamento {
  AVISTA
  APRAZO
}
